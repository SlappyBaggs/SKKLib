using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.ComponentModel;
using Megahard.Krypton.Toolkit;
using System.Drawing.Drawing2D;
using System.ComponentModel.Design;
using Megahard.ExtensionMethods;
using System.Configuration;
using Megahard.Data;

namespace Megahard.Controls
{
	[Designer(typeof(Design.ControlDesigner))]
	[Designer(typeof(UserControlBase.UserControlDocDesigner), typeof(IRootDesigner))]
	[ToolboxItem(false)]
	public partial class UserControlBase : UserControl, Data.IObservableObject, ISupportInitialize, System.Configuration.IPersistComponentSettings
	{
		protected UserControlBase()
		{
			InitializeComponent();
		}

		// Todo: make this thing autogenerated
		protected struct PropertyBacking<T>
		{
			public PropertyBacking(string prop)
				: this()
			{
				prop_ = prop;
			}
			public PropertyBacking(string prop, T val)
				: this()
			{
				prop_ = prop;
				val_ = val;
			}

			T val_;
			readonly PropertyPath prop_;
			public PropertyPath Name
			{
				get { return prop_; }
			}
			public bool WouldChange(T value)
			{
				return !object.Equals(val_, value);
			}

			public ObjectChangedEventArgs<T> SetValueNoEqualCheck(UserControlBase owner, T value)
			{
				owner.RaiseObjectChanging(new ObjectChangingEventArgs(prop_, value));
				var old = val_;
				val_ = value;
				var chg = new Data.ObjectChangedEventArgs<T>(prop_, old, value);
				owner.RaiseObjectChanged(chg);
				return chg;
			}
			public ObjectChangedEventArgs<T> SetValue(UserControlBase owner, T value)
			{
				if(WouldChange(value))
					return SetValueNoEqualCheck(owner, value);
				return null;
			}

			public T GetValue()
			{
				return val_;
			}
		}

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose(bool disposing)
		{
			if (disposing)
			{
				if (components != null)
					components.Dispose();
				if (childObs_ != null)
					childObs_.Dispose();

				childObs_ = null;
				ehObjectChanged_.Dispose();
				ehObjectChanging_.Dispose();
				propChg_ = null;
				propChanging_ = null;
				if (_settings != null && SaveSettings)
				{
					SaveComponentSettings();
				}
			}

			base.Dispose(disposing);
		}

		Data.ChildObservables childObs_;

		/// <summary>
		/// The object used as sender when firing Changed and Changing events
		/// </summary>
		protected virtual object EventSenderObject
		{
			get { return this; }
		}

		protected ServiceType GetService<ServiceType>() where ServiceType : class
		{
			return base.GetService(typeof(ServiceType)) as ServiceType;
		}

		protected IDesignerHost DesignerHost { get { return GetService<IDesignerHost>(); } }
		protected IInheritanceService InheritanceService { get { return GetService<IInheritanceService>(); } }


		protected void RegisterChildObservable(string prop)
		{
			var co = TypeDescriptor.GetProperties(this)[prop].GetValue(this) as Data.IObservableObject;
			System.Diagnostics.Debug.Assert(co != null);
			RegisterChildObservable(prop, co);
		}

		protected virtual void OnInitialized()
		{
		}

		bool initializing_;
		
		[Browsable(false)]
		public bool IsInitialized
		{
			get { return initializing_ == false; }
		}


		void ISupportInitialize.BeginInit()
		{
			initializing_ = true;
		}

		void ISupportInitialize.EndInit()
		{
			System.Diagnostics.Debug.Assert(initializing_);
			initializing_ = false;
			OnInitialized();
		}

		//<SyncEvent Name="ObjectChanged" Category="Observation"/>
		//<SyncEvent Name="ObjectChanging" Category="Observation"/>
		PropertyChangedEventHandler propChg_;
		event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged
		{
			add { propChg_ += value;  }
			remove { propChg_ -= value; }
		}

		PropertyChangingEventHandler propChanging_;
		event PropertyChangingEventHandler INotifyPropertyChanging.PropertyChanging
		{
			add { propChanging_ += value; }
			remove { propChanging_ -= value; }
		}

		partial void PreRaiseObjectChanging(ObjectChangingEventArgs args, ref bool fireEvent)
		{
			if (!args.IsChild && args.NewValue is Data.IObservableObject)
			{
				RegisterChildObservable(args.PropertyName, args.NewValue as Data.IObservableObject);
			}
			fireEvent = CanRaiseChangeEvents;
		}

		partial void PostRaiseObjectChanged(ObjectChangedEventArgs args)
		{
			var copy = propChg_;
			if (propChg_ != null)
				propChg_(this, args);
		}

		partial void PostRaiseObjectChanging(ObjectChangingEventArgs args)
		{
			var copy = propChanging_;
			if (copy != null)
				copy(this, args);
		}

		protected void RegisterChildObservable(Data.PropertyPath prop, Data.IObservableObject ob)
		{
			if (childObs_ == null)
				childObs_ = new Data.ChildObservables(PropertyObject_ObjectChanged, PropertyObject_ObjectChanging);
			childObs_.RegisterObservableProperty(prop, ob);
		}


		partial void PreRaiseObjectChanged(ObjectChangedEventArgs args, ref bool fireEvent)
		{
			if (childObs_ != null && args.OldValue is Data.IObservableObject && !args.IsChild)
			{
				childObs_.UnRegisterObservableProperty(args.OldValue as Data.IObservableObject);
			}
			fireEvent = CanRaiseChangeEvents;
		}

		protected virtual bool CanRaiseChangeEvents
		{
			get { return suspendEvents_ == 0 && IsInitialized; }
		}

		int suspendEvents_ = 0;
		protected void SuspendChangeEvents()
		{
			suspendEvents_ += 1;
		}

		protected void ResumeChangeEvents()
		{
			suspendEvents_ -= 1;
			if (suspendEvents_ <= 0)
				suspendEvents_ = 0;
		}

		protected virtual ApplicationSettingsBase CreateApplicationSettings()
		{
			return null;
		}

		void PropertyObject_ObjectChanging(object sender, Data.ObjectChangingEventArgs e)
		{
			if (childObs_ == null)
				return;

			RaiseObjectChanging(e.CreateChildInternal(childObs_.GetPropertyName(sender as Data.IObservableObject)));
		}

		void PropertyObject_ObjectChanged(object sender, Data.ObjectChangedEventArgs e)
		{
			if (childObs_ == null)
				return;
			RaiseObjectChanged(e.CreateChildInternal(childObs_.GetPropertyName(sender as Data.IObservableObject)));
		}

		/// <summary>
		/// Register a delegate to be called whenever the specified property has changed
		/// the arguments are oldval newval
		/// </summary>

		public AttachedObserver AttachObserver(PropertyPath prop, Action<ObjectChangedEventArgs> callback, Action<ObjectChangingEventArgs> changingCallback)
		{
			EventHandler<ObjectChangedEventArgs> eh = null;
			if (callback != null)
			{
				eh = (s, chg) =>
					{
						if (chg.PropertyName == prop)
							callback(chg);
					};
				ObjectChanged += eh;
			}

			EventHandler<ObjectChangingEventArgs> ehChanging = null;
			if (changingCallback != null)
			{
				ehChanging = (s, chging) =>
					{
						if (chging.PropertyName == prop)
							changingCallback(chging);
					};
				ObjectChanging += ehChanging;
			}

			Action detatch = () =>
			{
				if (eh != null)
					ObjectChanged -= eh;
				if (ehChanging != null)
					ObjectChanging -= ehChanging;
			};
			return new AttachedObserver(detatch);
		}
		public AttachedObserver AttachObserver(PropertyPath prop, Action<ObjectChangedEventArgs> callback)
		{
			return AttachObserver(prop, callback, null);
		}

		public AttachedObserver AttachObserver<T>(PropertyPath prop, Action<ObjectChangedEventArgs<T>> callback)
		{
			Action<ObjectChangedEventArgs> newCallback = chg =>
				{
					if (chg is ObjectChangedEventArgs<T>)
						callback((ObjectChangedEventArgs<T>)chg);
				};
			return AttachObserver(prop, newCallback, null);
		}

		protected class UserControlDocDesigner : System.Windows.Forms.Design.DocumentDesigner
		{
			public UserControlDocDesigner()
			{
				AutoResizeHandles = true;
			}
			protected override void  PreFilterProperties(System.Collections.IDictionary properties)
			{
				base.PreFilterProperties(properties);
				string[] strArray = new string[] { "Size" };
				PropertyDescriptor oldPropertyDescriptor = (PropertyDescriptor) properties["Size"];
				if (oldPropertyDescriptor != null)
				{
					properties["Size"] = TypeDescriptor.CreateProperty(typeof(UserControlDocDesigner), oldPropertyDescriptor, new Attribute[0]);
				}
			}
			
			System.Drawing.Size Size
			{
				get
				{
					return this.Control.ClientSize;
				}
				set
				{
					this.Control.ClientSize = value;
				}
			}
		}


		#region IPersistComponentSettings Support
		Configuration.ComponentSettings _settings;
		protected virtual void OnLoadComponentSettings(Configuration.ComponentSettings settings)
		{
		}

		public void LoadComponentSettings()
		{
			if (_settings == null)
				_settings = SaveSettings ? new Configuration.ComponentSettings(this) : null;
			if (_settings != null)
			{
				_settings.Reload();
				OnLoadComponentSettings(_settings);
			}
		}

		protected virtual void OnResetComponentSettings(Configuration.ComponentSettings settings)
		{
		}

		public void ResetComponentSettings()
		{
			if (_settings != null)
			{
				_settings.Reset();
				OnResetComponentSettings(_settings);
			}
		}

		protected virtual void OnSaveComponentSettings(Configuration.ComponentSettings settings)
		{
		}

		public void SaveComponentSettings()
		{
			if (_settings != null)
			{
				OnSaveComponentSettings(_settings);
				_settings.Save();
			}

		}

		[DefaultValue(false)]
		[Category("Application Settings")]
		public bool SaveSettings
		{
			get;
			set;
		}


		string _settingsKey;
		[DefaultValue(null)]
		[Category("Application Settings")]
		public string SettingsKey
		{
			get { return _settingsKey; }
			set
			{
				_settingsKey = value;
				if (_settings != null)
					_settings.SetSettingsKey(value);
			}
		}
		#endregion

	}
}
